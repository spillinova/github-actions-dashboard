name: Deploy to VPS

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/github-actions-dashboard
  DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH || '/root/github-actions-dashboard' }}

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opt: image=moby/buildkit:master
          install: true
          version: latest
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            
            # Create deployment directory
            mkdir -p ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}
            
            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOF'
            version: '3.8'

            services:
              app:
                image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
                container_name: github-actions-dashboard
                restart: unless-stopped
                ports:
                  - "8000:8000"
                volumes:
                  - ./data:/app/data
                env_file:
                  - .env
                environment:
                  - HOST=0.0.0.0
                  - PORT=8000
                  - PYTHONUNBUFFERED=1
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 5s
                logging:
                  driver: json-file
                  options:
                    max-size: "10m"
                    max-file: "3"
            EOF

            # Create .env file
            cat > .env << EOF
            GITHUB_TOKEN=${{ secrets.GH_PAT }}
            HOST=0.0.0.0
            PORT=8000
            PYTHONUNBUFFERED=1
            EOF

            # Create data directory
            mkdir -p data

            # Clean up and restart
            echo "Stopping and removing existing containers..."
            docker-compose down -v --remove-orphans || true
            
            # Clean up unused resources
            echo "Cleaning up unused resources..."
            docker system prune -f

            # Pull the latest image
            echo "Pulling the latest image..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose pull

            # Start the services
            echo "Starting services..."
            docker-compose up -d

            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            MAX_RETRIES=24
            RETRY_DELAY=5
            i=1
            container_healthy=false

            # First, wait for container to be running
            while [ $i -le $MAX_RETRIES ]; do
                CONTAINER_STATE=$(docker inspect --format='{{.State.Status}}' github-actions-dashboard 2>/dev/null || echo "starting")
                
                if [ "$CONTAINER_STATE" = "running" ]; then
                    echo "Container is running, checking health status..."
                    break
                fi
                
                if [ $i -eq $MAX_RETRIES ]; then
                    echo "Container failed to start after $((MAX_RETRIES * RETRY_DELAY)) seconds"
                    echo "Container state: $CONTAINER_STATE"
                    docker ps -a
                    exit 1
                fi
                
                echo "Waiting for container to start (attempt $i/$MAX_RETRIES), current state: $CONTAINER_STATE"
                sleep $RETRY_DELAY
                i=$((i + 1))
            done

            # Reset counter for health check
            i=1

            # Now check health status
            while [ $i -le $MAX_RETRIES ]; do
                CONTAINER_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' github-actions-dashboard 2>/dev/null || echo "starting")
                
                if [ "$CONTAINER_HEALTH" = "healthy" ]; then
                    echo "Container is healthy!"
                    container_healthy=true
                    break
                fi
                
                # If container is running but health check is failing, show more details
                if [ "$CONTAINER_HEALTH" = "unhealthy" ] || [ $i -gt $((MAX_RETRIES / 2)) ]; then
                    echo "Container health check failing, showing debug info..."
                    echo "=== Container logs ==="
                    docker logs github-actions-dashboard --tail 50
                    echo -e "\n=== Checking if port 8000 is listening ==="
                    docker exec github-actions-dashboard sh -c "netstat -tuln | grep 8000 || echo 'Port 8000 not found in listening state'"
                    echo -e "\n=== Checking processes ==="
                    docker top github-actions-dashboard
                fi
                
                if [ $i -eq $MAX_RETRIES ]; then
                    echo "Container failed health check after $((MAX_RETRIES * RETRY_DELAY)) seconds"
                    echo "Container health status: $CONTAINER_HEALTH"
                    echo -e "\n=== Final container logs ==="
                    docker logs github-actions-dashboard --tail 100
                    echo -e "\n=== Container inspect ==="
                    docker inspect github-actions-dashboard
                    exit 1
                fi
                
                echo "Container health status: $CONTAINER_HEALTH (attempt $i/$MAX_RETRIES)"
                sleep $RETRY_DELAY
                i=$((i + 1))
            done

            # Show container status and logs
            echo -e "\n=== Container status ==="
            docker ps -a

            echo -e "\n=== Container logs ==="
            docker logs github-actions-dashboard --tail 100

            # Verify health check endpoint
            echo -e "\n=== Verifying health check endpoint ==="
            HEALTH_CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || echo "curl_error")
            
            if [ "$HEALTH_CHECK_RESPONSE" != "200" ]; then
                echo "Health check failed with status code: $HEALTH_CHECK_RESPONSE"
                echo -e "\n=== Debug Info ==="
                echo "Container logs:"
                docker logs github-actions-dashboard --tail 50
                echo -e "\nContainer processes:"
                docker top github-actions-dashboard
                echo -e "\nContainer environment:"
                docker exec github-actions-dashboard env
                exit 1
            fi

            echo -e "\n=== Deployment completed successfully! ==="
            echo "Service is now available at http://$(hostname -I | awk '{print $1}'):8000"
