name: Deploy to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to VPS - ${{ github.event.head_commit && (github.event.head_commit.message | truncate(30, true, '...')) || 'Manual deployment' }}
    # Add a concurrency group to cancel in-progress runs when a new commit is pushed
    concurrency: 
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_PAT }}  # Make sure this is a PAT with 'write:packages' scope
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/github-actions-dashboard:latest
        build-args: |
          GITHUB_TOKEN=${{ secrets.GH_PAT }}
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        envs: GH_PAT
        script: |-
          # Create deployment directory
          mkdir -p ${{ secrets.VPS_DEPLOY_PATH }}
          cd ${{ secrets.VPS_DEPLOY_PATH }}

          # Create docker-compose.yml if it doesn't exist
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOL'
          version: '3.8'


          services:
            app:
              image: ghcr.io/${{ github.repository_owner }}/github-actions-dashboard:latest
              container_name: github-actions-dashboard
              restart: unless-stopped
              ports:
                - "8000:8000"
              volumes:
                - ./data:/app/data
              env_file: .env
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOL
          fi

          # Create .env file if it doesn't exist
          if [ ! -f .env ]; then
            echo "GITHUB_TOKEN=$GH_PAT" > .env
            echo "HOST=0.0.0.0" >> .env
            echo "PORT=8000" >> .env
            echo "# Add any additional environment variables here" >> .env
          else
            # Update GITHUB_TOKEN if it already exists in .env
            if grep -q "^GITHUB_TOKEN=" .env; then
              sed -i "s|^GITHUB_TOKEN=.*|GITHUB_TOKEN=$GH_PAT|" .env
            else
              echo "GITHUB_TOKEN=$GH_PAT" >> .env
            fi
          fi

          # Create necessary directories
          mkdir -p data

          # Stop and remove existing containers
          docker-compose down || true

          # Ensure we're using the latest image
          echo $GH_PAT | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          docker pull ghcr.io/${{ github.repository_owner }}/github-actions-dashboard:latest

          # Start the application
          docker-compose up -d --build

          # Clean up old images
          docker image prune -f

          echo "Deployment completed successfully!"
